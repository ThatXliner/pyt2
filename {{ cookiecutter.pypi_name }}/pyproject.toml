[tool.poetry]
name = "{{ cookiecutter.pypi_name }}"
description = "{{ cookiecutter.project_description }}"
authors = ["{{ cookiecutter.author }} <{{ cookiecutter.email }}>"]
version = "0.1.0"

readme = "README.md"
license = "GPL-3.0-or-later"

classifiers = [
    # Get the list of trove classifiers here: https://pypi.org/classifiers/
    "Programming Language :: Python :: Implementation :: CPython",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Natural Language :: English",
]{% if cookiecutter.add_docs == "yes" %}
documentation = "https://{{ cookiecutter.module_name.replace("_", "") }}.readthedocs.io/en/latest/index.html"{% endif %}
homepage = "https://github.com/{{ cookiecutter.username }}/{{ cookiecutter.pypi_name }}"
# keywords = ["awesome", "project"]  # Maximum of 5 keywords

[tool.poetry.dependencies]
python = "^3.7"{% if cookiecutter.is_app == "yes" %}

[tool.poetry.scripts]
{{ cookiecutter.module_name }} = "{{ cookiecutter.module_name }}.__main__:main"
{% endif %}

[tool.poetry.dev-dependencies]
pytest = "^5.2"
black = "^21.5b0"
mypy = "^0.812"
isort = "^5.8.0"
pylint = "^2.8.2"
toml = "^0.10.2"
hypothesis = "^6.12.0"
shed = "^0.5.3"
pytest-cov = "^2.11.1"{% if cookiecutter.add_docs == "yes" %}
Sphinx = "^4.0.0"{% endif %}

[tool.poe.tasks]
# Code linting
mypy   = {cmd = "mypy {{ cookiecutter.module_name }} --strict", help = "Run MyPy on codebase"}
pylint = {cmd = "pylint {{ cookiecutter.module_name }} --fail-under=8", help = "Run Pylint on codebase"}
check_black = {"cmd" = "black {{ cookiecutter.module_name }} --check"}
check_isort = {"cmd" = "isort {{ cookiecutter.module_name }} --check --profile=black"}
style    = ["check_black", "check_isort"]
codebase = ["pylint", "mypy"]
    [tool.poe.tasks.docs]
    cmd = "sphinx-build docs build"
    help = "Build documentation"

    [tool.poe.tasks.format]
    cmd = "shed"
    help = "Format code"

    [tool.poe.tasks.lint]
    sequence = ["style", "codebase"]
    help = "Lint codebase"

    [tool.poe.tasks.test]
    cmd = "pytest -vvv --cov={{ cookiecutter.module_name }}"
    help = "Simply run test suite"

    [tool.poe.tasks.ci]
    cmd = "pytest -vvv --cov={{ cookiecutter.module_name }} --cov-report=xml"
    help = "This workflow is for Github Actions"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
