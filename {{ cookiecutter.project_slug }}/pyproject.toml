{% set good_slug = cookiecutter.project_slug.replace(" ", "_").replace("-", "_") %}
[tool.poetry]
name = "{{ good_slug }}"
description = "{{ cookiecutter.project_description }}"
authors = ["{{ cookiecutter.author }} <{{ cookiecutter.email }}>"]
version = "0.1.0"

readme = "README.md"
license = "GPL-3.0-or-later"

classifiers = [
    # Get the list of trove classifiers here: https://pypi.org/classifiers/
    "Programming Language :: Python :: Implementation :: CPython",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Natural Language :: English",
]
{% if cookiecutter.add_docs == "yes" %}documentation = "https://{{ good_slug }}.readthedocs.io/en/latest/index.html"
{% endif %}homepage = "https://github.com/{{ cookiecutter.username }}/{{ cookiecutter.project_slug }}"
# keywords = ["awesome", "project"]  # Maximum of 5 keywords
[tool.poetry.dependencies]
python = "^3.7"
{% if cookiecutter.is_app == "yes" %}

[tool.poetry.scripts]
{{ good_slug }} = "{{ good_slug }}.__main__:main"

{% endif %}
[tool.poetry.dev-dependencies]
pytest = "^5.2"
black = "^21.5b0"
mypy = "^0.812"
isort = "^5.8.0"
pylint = "^2.8.2"
toml = "^0.10.2"
hypothesis = "^6.12.0"
pytest-cov = "^2.11.1"

[tool.poe.tasks]
docs = {cmd = "sphinx-build docs build", help = "Build documentation"}

format = ["black", "isort"]
black = {cmd = "black .", help = "Run black on codebase"}
isort = {cmd = "isort . --profile=black", help = "Run isort on codebase"}
mypy = {cmd = "mypy {{ good_slug }} --strict", help = "Run MyPy on codebase"}
pylint = {cmd = "pylint {{ good_slug }} --fail-under=8", help = "Run Pylint on codebase"}

_black = {"cmd" = "black {{ good_slug }} --check"}
_isort = {"cmd" = "isort {{ good_slug }} --check --profile=black"}
style = ["_isort", "_black"]
codebase = ["pylint","mypy"]
lint = ["style", "codebase"]

test = {cmd = "pytest -vvv", help = "Run test suite"}
cov = {cmd = "pytest -vvv --cov={{ good_slug }} --cov-report=html", help = "Run test suite with codecoverage (HTML format)"}
fcov = {cmd = "pytest -vvv --cov={{ good_slug }} --cov-report=html -n auto", help = "Run test suite with codecoverage in parallel. May decrease execution time"}
ftest = {cmd = "pytest -vvv -n auto", help = "Run test suite in parallel. May decrease execution time"}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
